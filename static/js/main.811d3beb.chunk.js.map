{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditableSpan.tsx","Components/Task.tsx","Components/Todolist.tsx","state/tasks-reducer.ts","state/todoLists-reducer.ts","App.tsx","serviceWorker.ts","state/store.ts","utils/localstorage-utils.ts","index.tsx"],"names":["AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","Button","initState","App","console","log","localStorage","getItem","todolists","useSelector","state","dispatch","useDispatch","action","taskId","type","removeTaskAC","addTaskAC","ChangeTodolistFilterAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","ChangeTodolistTitleAC","addTodolist","v1","AddTodolistAC","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","Boolean","window","location","hostname","match","rootReducer","combineReducers","copyState","newTask","todolistTasks","todolist","find","persistedState","serializedState","sessionStorage","JSON","parse","err","loadState","store","createStore","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.811d3beb.chunk.js","sourcesContent":["import { Button, IconButton, TextField } from \"@material-ui/core\";\r\nimport { AddBox } from \"@material-ui/icons\";\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void;\r\n};\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n  let [title, setTitle] = useState(\"\");\r\n  let [error, setError] = useState<string | null>(null);\r\n\r\n  const addItem = () => {\r\n    if (title.trim() !== \"\") {\r\n      props.addItem(title);\r\n      setTitle(\"\");\r\n    } else {\r\n      setError(\"Title is required\");\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItem();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        error={!!error}\r\n        variant=\"outlined\"\r\n        value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        label=\"Title\"\r\n        helperText={error}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addItem}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n","import { TextField } from '@material-ui/core';\r\nimport React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant=\"outlined\" value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {FilterValuesType} from \"../App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId]);\r\n\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {FilterValuesType} from \"../App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n};\r\n\r\ntype PropsType = {\r\n    id: string;\r\n    title: string;\r\n    tasks: Array<TaskType>;\r\n    removeTask: (taskId: string, todolistId: string) => void;\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void;\r\n    addTask: (title: string, todolistId: string) => void;\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void;\r\n    removeTodolist: (id: string) => void;\r\n    changeTodolistTitle: (id: string, newTitle: string) => void;\r\n    filter: FilterValuesType;\r\n    changeTaskTitle: (\r\n        taskId: string,\r\n        newTitle: string,\r\n        todolistId: string\r\n    ) => void;\r\n};\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, , props.id]);\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    };\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    },[props.changeTodolistTitle,props.id])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, \"all\");\r\n    }, [props.id,props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, \"active\")\r\n    }, [props.id,props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, \"completed\");\r\n    }, [props.id,props.changeFilter])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter((t: any) => t.isDone === false);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter((t: any) => t.isDone === true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                        task={t}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        todolistId={props.id}\r\n                        key={t.id}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color=\"primary\"\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color=\"primary\"\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"primary\"\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { v1 } from \"uuid\";\r\nimport { TasksStateType } from \"../App\";\r\nimport { TaskType } from \"../Components/Todolist\";\r\nimport {\r\n  AddTodoListActionType,\r\n  RemoveTodolistActionType\r\n} from \"./todoLists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n  type: \"REMOVE-TASK\";\r\n  taskId: string;\r\n  todolistId: string;\r\n};\r\nexport type AddTaskActionType = {\r\n  type: \"ADD-TASK\";\r\n  title: string;\r\n  todolistId: string;\r\n};\r\nexport type ChangeTaskStatusType = {\r\n  type: \"CHANGE-TASK-STATUS\";\r\n  taskId: string;\r\n  isDone: boolean;\r\n  todolistId: string;\r\n};\r\nexport type ChangeTaskTitleType = {\r\n  type: \"CHANGE-TASK-TITLE\";\r\n  taskId: string;\r\n  title: string;\r\n  todolistId: string;\r\n};\r\ntype ActionsType =\r\n  | RemoveTaskActionType\r\n  | AddTaskActionType\r\n  | ChangeTaskStatusType\r\n  | ChangeTaskTitleType\r\n  | AddTodoListActionType\r\n  | RemoveTodolistActionType;\r\n\r\nconst initState: TasksStateType = {\r\n  \"1\": [\r\n    { id: \"t1\", title: \"hooks\", isDone: true },\r\n    { id: \"t2\", title: \"VDOM\", isDone: false },\r\n  ],\r\n};\r\n\r\nexport const tasksReducer = (\r\n  state: TasksStateType = initState,\r\n  action: ActionsType\r\n) => {\r\n  switch (action.type) {\r\n    case \"REMOVE-TASK\": {\r\n      let copyState = { ...state };\r\n      copyState[action.todolistId] = copyState[action.todolistId].filter(\r\n        (task) => task.id !== action.taskId\r\n      );\r\n      return copyState;\r\n    }\r\n    case \"ADD-TASK\": {\r\n      let newTask: TaskType = { id: v1(), title: action.title, isDone: false };\r\n      let copyState = { ...state };\r\n\r\n      copyState[action.todolistId] = [newTask, ...state[action.todolistId]];\r\n      return copyState;\r\n    }\r\n    case \"CHANGE-TASK-STATUS\": {\r\n      let todolistTasks = state[action.todolistId];\r\n      state[action.todolistId] = todolistTasks.map((t) =>\r\n        t.id === action.taskId ? { ...t, isDone: action.isDone } : t\r\n      );\r\n      return { ...state };\r\n    }\r\n    case \"CHANGE-TASK-TITLE\": {\r\n      let todolistTasks = state[action.todolistId];\r\n      state[action.todolistId] = todolistTasks.map((t) =>\r\n        t.id === action.taskId ? { ...t, title: action.title } : t\r\n      );\r\n      return { ...state };\r\n    }\r\n    case \"ADD-TODOLIST\": {\r\n      let todolistId = action.todolistId;\r\n      return { ...state, [todolistId]: [] };\r\n    }\r\n    case \"REMOVE-TODOLIST\": {\r\n      let copyState = { ...state };\r\n      delete copyState[action.id];\r\n      return copyState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const removeTaskAC = (\r\n  taskId: string,\r\n  todolistId: string\r\n): RemoveTaskActionType => {\r\n  return { type: \"REMOVE-TASK\", taskId, todolistId };\r\n};\r\nexport const addTaskAC = (\r\n  title: string,\r\n  todolistId: string\r\n): AddTaskActionType => {\r\n  return { type: \"ADD-TASK\", title, todolistId };\r\n};\r\nexport const changeTaskStatusAC = (\r\n  taskId: string,\r\n  isDone: boolean,\r\n  todolistId: string\r\n): ChangeTaskStatusType => {\r\n  return { type: \"CHANGE-TASK-STATUS\", taskId, isDone, todolistId };\r\n};\r\nexport const changeTaskTitleAC = (\r\n  taskId: string,\r\n  title: string,\r\n  todolistId: string\r\n): ChangeTaskTitleType => {\r\n  return { type: \"CHANGE-TASK-TITLE\", taskId, title, todolistId };\r\n};\r\n","import { v1 } from \"uuid\";\r\nimport { FilterValuesType, TodolistType } from \"../App\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n  type: \"REMOVE-TODOLIST\";\r\n  id: string;\r\n};\r\n\r\nexport type AddTodoListActionType = {\r\n  type: \"ADD-TODOLIST\";\r\n  title: string;\r\n  todolistId: string;\r\n};\r\n\r\ntype ChangeTodolistTitleActionType = {\r\n  type: \"CHANGE-TODOLIST-TITLE\";\r\n  id: string;\r\n  title: string;\r\n};\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n  type: \"CHANGE-TODOLIST-FILTER\";\r\n  id: string;\r\n  filter: FilterValuesType;\r\n};\r\n\r\ntype ActionType =\r\n  | RemoveTodolistActionType\r\n  | AddTodoListActionType\r\n  | ChangeTodolistTitleActionType\r\n  | ChangeTodolistFilterActionType;\r\n\r\nconst initState: Array<TodolistType> = [\r\n  {\r\n    id: \"1\",\r\n    title: \"React\",\r\n    filter: \"all\",\r\n  },\r\n];\r\n\r\nexport const todolistsReducer = (\r\n  state: Array<TodolistType> = initState,\r\n  action: ActionType\r\n) => {\r\n  switch (action.type) {\r\n    case \"REMOVE-TODOLIST\": {\r\n      return state.filter((tl) => tl.id !== action.id);\r\n    }\r\n    case \"ADD-TODOLIST\": {\r\n      let task = { id: action.todolistId, title: action.title, isDone: false };\r\n      return [...state, task];\r\n    }\r\n    case \"CHANGE-TODOLIST-TITLE\": {\r\n      const todolist = state.find((tl) => tl.id === action.id);\r\n      if (todolist) {\r\n        todolist.title = action.title;\r\n        return [...state];\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n\r\n    case \"CHANGE-TODOLIST-FILTER\": {\r\n      debugger;\r\n      const todolist = state.find((tl) => tl.id === action.id);\r\n      if (todolist) {\r\n        todolist.filter = action.filter;\r\n      }\r\n      debugger;\r\n      return [...state];\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport const RemoveTodolistAC = (\r\n  todolistId: string\r\n): RemoveTodolistActionType => {\r\n  return { type: \"REMOVE-TODOLIST\", id: todolistId };\r\n};\r\nexport const AddTodolistAC = (title: string): AddTodoListActionType => {\r\n  return { type: \"ADD-TODOLIST\", title, todolistId: v1() };\r\n};\r\nexport const ChangeTodolistTitleAC = (\r\n  todolistId: string,\r\n  title: string\r\n): ChangeTodolistTitleActionType => {\r\n  return { type: \"CHANGE-TODOLIST-TITLE\", id: todolistId, title };\r\n};\r\nexport const ChangeTodolistFilterAC = (\r\n  todolistId: string,\r\n  filter: FilterValuesType\r\n): ChangeTodolistFilterActionType => {\r\n  return { type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter };\r\n};\r\n","import {\r\n  AppBar,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  Paper,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AddItemForm } from \"./Components/AddItemForm\";\r\nimport { TaskType, Todolist } from \"./Components/Todolist\";\r\nimport { AppRootStateType } from \"./state/store\";\r\nimport {\r\n  addTaskAC,\r\n  changeTaskStatusAC,\r\n  changeTaskTitleAC,\r\n  removeTaskAC,\r\n} from \"./state/tasks-reducer\";\r\nimport {\r\n  AddTodolistAC,\r\n  ChangeTodolistFilterAC,\r\n  ChangeTodolistTitleAC,\r\n  RemoveTodolistAC,\r\n} from \"./state/todoLists-reducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n  id: string;\r\n  title: string;\r\n  filter: FilterValuesType;\r\n};\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\n\r\nconst App = React.memo(() => {\r\n  console.log(localStorage.getItem(\"app-state\"));\r\n\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistType>>(\r\n    (state) => state.todolists\r\n  );\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(\r\n    (state) => state.tasks\r\n  );\r\n  let dispatch = useDispatch();\r\n\r\n  const removeTask = useCallback(\r\n    (id: string, todolistId: string) => {\r\n      let action = removeTaskAC(id, todolistId);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const addTask = useCallback(\r\n    (title: string, todolistId: string) => {\r\n      let action = addTaskAC(title, todolistId);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const changeFilter = useCallback(\r\n    (todolistId: string, value: FilterValuesType) => {\r\n      let action = ChangeTodolistFilterAC(todolistId, value);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const changeStatus = useCallback(\r\n    (id: string, isDone: boolean, todolistId: string) => {\r\n      let action = changeTaskStatusAC(id, isDone, todolistId);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTaskTitle = useCallback(\r\n    (id: string, newTitle: string, todolistId: string) => {\r\n      let action = changeTaskTitleAC(id, newTitle, todolistId);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const removeTodolist = useCallback(\r\n    (id: string) => {\r\n      let action = RemoveTodolistAC(id);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTodolistTitle = useCallback(\r\n    (id: string, title: string) => {\r\n      let action = ChangeTodolistTitleAC(id, title);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n      let action = AddTodolistAC(title);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          ></IconButton>\r\n          <Typography variant=\"h6\">News</Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Grid container style={{ padding: \"20px\" }}>\r\n          <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {todolists.map((tl: any) => {\r\n            let allTodolistTasks = tasks[tl.id];\r\n            let tasksForTodolist = allTodolistTasks;\r\n\r\n            return (\r\n              <Grid item>\r\n                <Paper style={{ padding: \"10px\" }}>\r\n                  <Todolist\r\n                    key={tl.id}\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodolist}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeStatus}\r\n                    filter={tl.filter}\r\n                    removeTodolist={removeTodolist}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodolistTitle={changeTodolistTitle}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { loadState, saveState } from \"../utils/localstorage-utils\";\r\nimport { tasksReducer } from \"./tasks-reducer\";\r\n\r\nimport { todolistsReducer } from \"./todoLists-reducer\";\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n});\r\n\r\nlet persistedState = loadState();\r\nexport const store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n  applyMiddleware(thunk)\r\n);\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n});\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import { AppRootStateType } from \"../state/store\";\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = sessionStorage.getItem(\"state\");\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state: AppRootStateType) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    sessionStorage.setItem(\"state\", serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store } from \"./state/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}